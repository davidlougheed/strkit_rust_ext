on:
  release:
    types: [published]
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64, aarch64, armv7]  # x86,
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Run tests
        run: |
          python -m venv env
          source env/bin/activate
          python -m pip install 'maturin>=1.5,<1.6' pytest numpy
          python -m maturin develop
          pytest
      
  linux:
    runs-on: ubuntu-latest
    needs: [test]
    strategy:
      matrix:
        target: [x86_64]  # x86, aarch64, armv7 disabled for now
    steps:
      - uses: actions/checkout@v4
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist -i python3.9 -i python3.10 -i python3.11 -i python3.12
          sccache: 'true'
          manylinux: '2_28'
          # https://github.com/sfackler/rust-openssl/issues/2036#issuecomment-1724324145
          before-script-linux: |
            # If we're running on rhel centos, install needed packages.
            if command -v yum &> /dev/null; then
                yum update -y && yum install -y gcc perl-core openssl openssl-devel pkgconfig libatomic llvm-toolset

                # If we're running on i686 we need to symlink libatomic
                # in order to build openssl with -latomic flag.
                # if [[ ! -d "/usr/lib64" ]]; then
                #    ln -s /usr/lib/libatomic.so.1 /usr/lib/libatomic.so
                # fi

                # make sure we have pip (https://github.com/PyO3/maturin-action/issues/249)
                python3 -m ensurepip
            else
                # If we're running on debian-based system.
                apt update -y && apt-get install -y  libssl-dev openssl pkg-config libclang-dev python3-pip
            fi
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.target }}
          path: dist

  # windows:
  #   runs-on: windows-latest
  #   needs: [test]
  #   strategy:
  #     matrix:
  #       target: [x64, x86]
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Install OpenSSL (Windows)
  #       shell: powershell
  #       run: |
  #         echo "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Append
  #         vcpkg install openssl:${{ matrix.target }}-windows-static-md
  #     - name: Build wheels
  #       uses: PyO3/maturin-action@v1
  #       with:
  #         target: ${{ matrix.target }}
  #         args: --release --out dist -i python3.9 -i python3.10 -i python3.11 -i python3.12
  #         # sccache: 'true'
  #     - name: Upload wheels
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: wheels-windows-${{ matrix.target }}
  #         path: dist

  macos:
    runs-on: macos-latest
    needs: [test]
    strategy:
      matrix:
        target: [x86_64, aarch64]
    steps:
      - uses: actions/checkout@v4
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist -i python3.9 -i python3.10 -i python3.11 -i python3.12
          # sccache: 'true'
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.target }}
          path: dist

  sdist:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'release' || github.event_name == 'workflow_dispatch' }}
    needs: [linux, macos, sdist]  # windows,
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: wheels
          pattern: wheels-*
          merge-multiple: 'true'
      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing wheels/*
